// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// SearchEventsHandlerFunc turns a function with the right signature into a search events handler
type SearchEventsHandlerFunc func(SearchEventsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SearchEventsHandlerFunc) Handle(params SearchEventsParams) middleware.Responder {
	return fn(params)
}

// SearchEventsHandler interface for that can handle valid search events params
type SearchEventsHandler interface {
	Handle(SearchEventsParams) middleware.Responder
}

// NewSearchEvents creates a new http.Handler for the search events operation
func NewSearchEvents(ctx *middleware.Context, handler SearchEventsHandler) *SearchEvents {
	return &SearchEvents{Context: ctx, Handler: handler}
}

/*SearchEvents swagger:route GET /events searchEvents

get multiple events

Get list of events


*/
type SearchEvents struct {
	Context *middleware.Context
	Handler SearchEventsHandler
}

func (o *SearchEvents) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSearchEventsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
